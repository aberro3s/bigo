Good coode:
Readable
Escalable
	Speed-Time complexity
	Memory-Space complexity

JS
Performance measures

Big O scability of code, how much the algorithm slow down?
Steps into a function

O(n) -- Linear Time -- Depends on number of inputs
O(1) -- Constant Time -- Only the first item of the array
Rule Book
1 Worst Case
	Always think in the worst case for pulling data
2 Remove Constant
	Constants are irelevant due to the potential value of n, even if you have an 2n
3 Different terms for inputs
	O(a + b) for different inputs
	Nested loops = O(n^2)
	Nested elements should be multiplied
4 Drop Non Dominants
	Keep the dominant term, the n with higher concurrency
	
**Iterating through half a collection is still O(n)
**Two separate collections O(a+b)

What cause time in a function?
Operations(+,-,*,/)
Comparisons(<>==)
Looping
Outside Function call

O(n!) adding a loop for every element

Space Complexity
Variables
Data Structures
Funtion Call
Allocation

Data Structures
variation in how store data
blocks of data
***Javascript doesnt have intergers, only 64 bit floats
***it has undefined as well
	ARRAY
***pop removes last item
***ushift adds element at the beggining of the array // O(n)
	static - fixed number of elements
 THIS
 In which scope we are, using the left from dot technique

